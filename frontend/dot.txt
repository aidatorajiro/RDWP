strict digraph deps {
"RDWP" [style=dashed];
{rank=max; "fail"; };
{rank=max; "rts" [shape=box]; };
"Cabal" -> "array";
"Cabal" -> "base";
"Cabal" -> "binary";
"Cabal" -> "bytestring";
"Cabal" -> "containers";
"Cabal" -> "deepseq";
"Cabal" -> "directory";
"Cabal" -> "filepath";
"Cabal" -> "mtl";
"Cabal" -> "parsec";
"Cabal" -> "pretty";
"Cabal" -> "process";
"Cabal" -> "text";
"Cabal" -> "time";
"Cabal" -> "transformers";
"Cabal" -> "unix";
"MemoTrie" -> "base";
"MemoTrie" -> "newtype-generics";
"RDWP" -> "base";
"RDWP" -> "bytestring";
"RDWP" -> "containers";
"RDWP" -> "file-embed";
"RDWP" -> "ghcjs-dom";
"RDWP" -> "jsaddle";
"RDWP" -> "matrix";
"RDWP" -> "mtl";
"RDWP" -> "parsec";
"RDWP" -> "random";
"RDWP" -> "raw-strings-qq";
"RDWP" -> "reflex";
"RDWP" -> "reflex-dom";
"RDWP" -> "safe";
"RDWP" -> "text";
"RDWP" -> "time";
"StateVar" -> "base";
"StateVar" -> "stm";
"StateVar" -> "transformers";
"adjunctions" -> "array";
"adjunctions" -> "base";
"adjunctions" -> "comonad";
"adjunctions" -> "containers";
"adjunctions" -> "contravariant";
"adjunctions" -> "distributive";
"adjunctions" -> "free";
"adjunctions" -> "mtl";
"adjunctions" -> "profunctors";
"adjunctions" -> "semigroupoids";
"adjunctions" -> "semigroups";
"adjunctions" -> "tagged";
"adjunctions" -> "transformers";
"adjunctions" -> "transformers-compat";
"adjunctions" -> "void";
"aeson" -> "attoparsec";
"aeson" -> "base";
"aeson" -> "base-compat-batteries";
"aeson" -> "bytestring";
"aeson" -> "containers";
"aeson" -> "data-fix";
"aeson" -> "deepseq";
"aeson" -> "dlist";
"aeson" -> "ghc-prim";
"aeson" -> "hashable";
"aeson" -> "primitive";
"aeson" -> "scientific";
"aeson" -> "strict";
"aeson" -> "tagged";
"aeson" -> "template-haskell";
"aeson" -> "text";
"aeson" -> "th-abstraction";
"aeson" -> "these";
"aeson" -> "time";
"aeson" -> "time-compat";
"aeson" -> "unordered-containers";
"aeson" -> "uuid-types";
"aeson" -> "vector";
"array" -> "base";
"assoc" -> "base";
"assoc" -> "bifunctors";
"assoc" -> "tagged";
"attoparsec" -> "array";
"attoparsec" -> "base";
"attoparsec" -> "bytestring";
"attoparsec" -> "containers";
"attoparsec" -> "deepseq";
"attoparsec" -> "ghc-prim";
"attoparsec" -> "scientific";
"attoparsec" -> "text";
"attoparsec" -> "transformers";
"base" -> "ghc-prim";
"base" -> "integer-gmp";
"base" -> "rts";
"base-compat" -> "base";
"base-compat" -> "unix";
"base-compat-batteries" -> "base";
"base-compat-batteries" -> "base-compat";
"base-orphans" -> "base";
"base-orphans" -> "ghc-prim";
"base64-bytestring" -> "base";
"base64-bytestring" -> "bytestring";
"bifunctors" -> "base";
"bifunctors" -> "base-orphans";
"bifunctors" -> "comonad";
"bifunctors" -> "containers";
"bifunctors" -> "tagged";
"bifunctors" -> "template-haskell";
"bifunctors" -> "th-abstraction";
"bifunctors" -> "transformers";
"bimap" -> "base";
"bimap" -> "containers";
"bimap" -> "deepseq";
"bimap" -> "exceptions";
"binary" -> "array";
"binary" -> "base";
"binary" -> "bytestring";
"binary" -> "containers";
"blaze-builder" -> "base";
"blaze-builder" -> "bytestring";
"blaze-builder" -> "deepseq";
"blaze-builder" -> "ghc-prim";
"blaze-builder" -> "text";
"bytestring" -> "base";
"bytestring" -> "deepseq";
"bytestring" -> "ghc-prim";
"bytestring" -> "integer-gmp";
"cabal-doctest" -> "Cabal";
"cabal-doctest" -> "base";
"cabal-doctest" -> "directory";
"cabal-doctest" -> "filepath";
"call-stack" -> "base";
"case-insensitive" -> "base";
"case-insensitive" -> "bytestring";
"case-insensitive" -> "deepseq";
"case-insensitive" -> "hashable";
"case-insensitive" -> "text";
"comonad" -> "base";
"comonad" -> "containers";
"comonad" -> "distributive";
"comonad" -> "indexed-traversable";
"comonad" -> "tagged";
"comonad" -> "transformers";
"comonad" -> "transformers-compat";
"constraints" -> "base";
"constraints" -> "binary";
"constraints" -> "deepseq";
"constraints" -> "ghc-prim";
"constraints" -> "hashable";
"constraints" -> "mtl";
"constraints" -> "transformers";
"constraints" -> "transformers-compat";
"constraints" -> "type-equality";
"constraints-extras" -> "aeson";
"constraints-extras" -> "base";
"constraints-extras" -> "constraints";
"constraints-extras" -> "template-haskell";
"containers" -> "array";
"containers" -> "base";
"containers" -> "deepseq";
"contravariant" -> "StateVar";
"contravariant" -> "base";
"contravariant" -> "transformers";
"data-default" -> "base";
"data-default" -> "data-default-class";
"data-default" -> "data-default-instances-containers";
"data-default" -> "data-default-instances-dlist";
"data-default" -> "data-default-instances-old-locale";
"data-default-class" -> "base";
"data-default-instances-containers" -> "base";
"data-default-instances-containers" -> "containers";
"data-default-instances-containers" -> "data-default-class";
"data-default-instances-dlist" -> "base";
"data-default-instances-dlist" -> "data-default-class";
"data-default-instances-dlist" -> "dlist";
"data-default-instances-old-locale" -> "base";
"data-default-instances-old-locale" -> "data-default-class";
"data-default-instances-old-locale" -> "old-locale";
"data-fix" -> "base";
"data-fix" -> "deepseq";
"data-fix" -> "hashable";
"deepseq" -> "array";
"deepseq" -> "base";
"dependent-map" -> "base";
"dependent-map" -> "constraints-extras";
"dependent-map" -> "containers";
"dependent-map" -> "dependent-sum";
"dependent-sum" -> "base";
"dependent-sum" -> "constraints-extras";
"dependent-sum" -> "some";
"dependent-sum-template" -> "base";
"dependent-sum-template" -> "dependent-sum";
"dependent-sum-template" -> "template-haskell";
"dependent-sum-template" -> "th-extras";
"directory" -> "base";
"directory" -> "filepath";
"directory" -> "time";
"directory" -> "unix";
"distributive" -> "base";
"distributive" -> "base-orphans";
"distributive" -> "tagged";
"distributive" -> "transformers";
"dlist" -> "base";
"dlist" -> "deepseq";
"exception-transformers" -> "base";
"exception-transformers" -> "fail";
"exception-transformers" -> "transformers";
"exception-transformers" -> "transformers-compat";
"exceptions" -> "base";
"exceptions" -> "mtl";
"exceptions" -> "stm";
"exceptions" -> "template-haskell";
"exceptions" -> "transformers";
"file-embed" -> "base";
"file-embed" -> "bytestring";
"file-embed" -> "directory";
"file-embed" -> "filepath";
"file-embed" -> "template-haskell";
"filepath" -> "base";
"free" -> "base";
"free" -> "comonad";
"free" -> "containers";
"free" -> "distributive";
"free" -> "exceptions";
"free" -> "indexed-traversable";
"free" -> "mtl";
"free" -> "profunctors";
"free" -> "semigroupoids";
"free" -> "template-haskell";
"free" -> "th-abstraction";
"free" -> "transformers";
"free" -> "transformers-base";
"ghc-boot-th" -> "base";
"ghc-prim" -> "rts";
"ghcjs-dom" -> "base";
"ghcjs-dom" -> "containers";
"ghcjs-dom" -> "ghcjs-dom-jsaddle";
"ghcjs-dom" -> "text";
"ghcjs-dom" -> "transformers";
"ghcjs-dom-jsaddle" -> "jsaddle-dom";
"happy" -> "array";
"happy" -> "base";
"happy" -> "containers";
"happy" -> "mtl";
"hashable" -> "base";
"hashable" -> "bytestring";
"hashable" -> "deepseq";
"hashable" -> "ghc-prim";
"hashable" -> "integer-gmp";
"hashable" -> "text";
"haskell-src-exts" -> "array";
"haskell-src-exts" -> "base";
"haskell-src-exts" -> "ghc-prim";
"haskell-src-exts" -> "happy";
"haskell-src-exts" -> "pretty";
"haskell-src-meta" -> "base";
"haskell-src-meta" -> "haskell-src-exts";
"haskell-src-meta" -> "pretty";
"haskell-src-meta" -> "syb";
"haskell-src-meta" -> "template-haskell";
"haskell-src-meta" -> "th-orphans";
"http-types" -> "array";
"http-types" -> "base";
"http-types" -> "bytestring";
"http-types" -> "case-insensitive";
"http-types" -> "text";
"indexed-traversable" -> "array";
"indexed-traversable" -> "base";
"indexed-traversable" -> "containers";
"indexed-traversable" -> "transformers";
"indexed-traversable-instances" -> "base";
"indexed-traversable-instances" -> "indexed-traversable";
"indexed-traversable-instances" -> "tagged";
"indexed-traversable-instances" -> "unordered-containers";
"indexed-traversable-instances" -> "vector";
"integer-gmp" -> "ghc-prim";
"integer-logarithms" -> "array";
"integer-logarithms" -> "base";
"integer-logarithms" -> "ghc-prim";
"integer-logarithms" -> "integer-gmp";
"invariant" -> "StateVar";
"invariant" -> "array";
"invariant" -> "base";
"invariant" -> "bifunctors";
"invariant" -> "comonad";
"invariant" -> "containers";
"invariant" -> "contravariant";
"invariant" -> "ghc-prim";
"invariant" -> "profunctors";
"invariant" -> "stm";
"invariant" -> "tagged";
"invariant" -> "template-haskell";
"invariant" -> "th-abstraction";
"invariant" -> "transformers";
"invariant" -> "transformers-compat";
"invariant" -> "unordered-containers";
"jsaddle" -> "aeson";
"jsaddle" -> "attoparsec";
"jsaddle" -> "base";
"jsaddle" -> "base-compat";
"jsaddle" -> "base64-bytestring";
"jsaddle" -> "bytestring";
"jsaddle" -> "containers";
"jsaddle" -> "deepseq";
"jsaddle" -> "exceptions";
"jsaddle" -> "filepath";
"jsaddle" -> "ghc-prim";
"jsaddle" -> "http-types";
"jsaddle" -> "lens";
"jsaddle" -> "primitive";
"jsaddle" -> "process";
"jsaddle" -> "random";
"jsaddle" -> "ref-tf";
"jsaddle" -> "scientific";
"jsaddle" -> "stm";
"jsaddle" -> "text";
"jsaddle" -> "time";
"jsaddle" -> "transformers";
"jsaddle" -> "unliftio-core";
"jsaddle" -> "unordered-containers";
"jsaddle" -> "vector";
"jsaddle-dom" -> "Cabal";
"jsaddle-dom" -> "base";
"jsaddle-dom" -> "base-compat";
"jsaddle-dom" -> "exceptions";
"jsaddle-dom" -> "jsaddle";
"jsaddle-dom" -> "lens";
"jsaddle-dom" -> "text";
"jsaddle-dom" -> "transformers";
"jsaddle-wkwebview" -> "aeson";
"jsaddle-wkwebview" -> "base";
"jsaddle-wkwebview" -> "bytestring";
"jsaddle-wkwebview" -> "containers";
"jsaddle-wkwebview" -> "data-default";
"jsaddle-wkwebview" -> "directory";
"jsaddle-wkwebview" -> "jsaddle";
"jsaddle-wkwebview" -> "text";
"kan-extensions" -> "adjunctions";
"kan-extensions" -> "array";
"kan-extensions" -> "base";
"kan-extensions" -> "comonad";
"kan-extensions" -> "containers";
"kan-extensions" -> "contravariant";
"kan-extensions" -> "distributive";
"kan-extensions" -> "free";
"kan-extensions" -> "invariant";
"kan-extensions" -> "mtl";
"kan-extensions" -> "profunctors";
"kan-extensions" -> "semigroupoids";
"kan-extensions" -> "tagged";
"kan-extensions" -> "transformers";
"kan-extensions" -> "transformers-compat";
"keycode" -> "base";
"keycode" -> "containers";
"keycode" -> "ghc-prim";
"keycode" -> "template-haskell";
"lens" -> "Cabal";
"lens" -> "array";
"lens" -> "base";
"lens" -> "base-orphans";
"lens" -> "bifunctors";
"lens" -> "bytestring";
"lens" -> "cabal-doctest";
"lens" -> "call-stack";
"lens" -> "comonad";
"lens" -> "containers";
"lens" -> "contravariant";
"lens" -> "distributive";
"lens" -> "exceptions";
"lens" -> "filepath";
"lens" -> "free";
"lens" -> "ghc-prim";
"lens" -> "hashable";
"lens" -> "kan-extensions";
"lens" -> "mtl";
"lens" -> "parallel";
"lens" -> "profunctors";
"lens" -> "reflection";
"lens" -> "semigroupoids";
"lens" -> "tagged";
"lens" -> "template-haskell";
"lens" -> "text";
"lens" -> "th-abstraction";
"lens" -> "transformers";
"lens" -> "transformers-compat";
"lens" -> "unordered-containers";
"lens" -> "vector";
"loop" -> "base";
"matrix" -> "base";
"matrix" -> "deepseq";
"matrix" -> "loop";
"matrix" -> "primitive";
"matrix" -> "semigroups";
"matrix" -> "vector";
"mmorph" -> "base";
"mmorph" -> "mtl";
"mmorph" -> "transformers";
"mmorph" -> "transformers-compat";
"monad-control" -> "base";
"monad-control" -> "stm";
"monad-control" -> "transformers";
"monad-control" -> "transformers-base";
"monad-control" -> "transformers-compat";
"monoidal-containers" -> "aeson";
"monoidal-containers" -> "base";
"monoidal-containers" -> "containers";
"monoidal-containers" -> "deepseq";
"monoidal-containers" -> "hashable";
"monoidal-containers" -> "lens";
"monoidal-containers" -> "newtype";
"monoidal-containers" -> "semialign";
"monoidal-containers" -> "semigroups";
"monoidal-containers" -> "these";
"monoidal-containers" -> "unordered-containers";
"mtl" -> "base";
"mtl" -> "transformers";
"network-uri" -> "base";
"network-uri" -> "deepseq";
"network-uri" -> "parsec";
"network-uri" -> "template-haskell";
"network-uri" -> "th-compat";
"newtype" -> "base";
"newtype-generics" -> "base";
"newtype-generics" -> "transformers";
"old-locale" -> "base";
"parallel" -> "array";
"parallel" -> "base";
"parallel" -> "containers";
"parallel" -> "deepseq";
"parallel" -> "ghc-prim";
"parsec" -> "base";
"parsec" -> "bytestring";
"parsec" -> "mtl";
"parsec" -> "text";
"patch" -> "base";
"patch" -> "constraints-extras";
"patch" -> "containers";
"patch" -> "dependent-map";
"patch" -> "dependent-sum";
"patch" -> "lens";
"patch" -> "monoidal-containers";
"patch" -> "semialign";
"patch" -> "semigroupoids";
"patch" -> "these";
"patch" -> "transformers";
"patch" -> "witherable";
"pretty" -> "base";
"pretty" -> "deepseq";
"pretty" -> "ghc-prim";
"prim-uniq" -> "base";
"prim-uniq" -> "dependent-sum";
"prim-uniq" -> "primitive";
"primitive" -> "base";
"primitive" -> "deepseq";
"primitive" -> "transformers";
"process" -> "base";
"process" -> "deepseq";
"process" -> "directory";
"process" -> "filepath";
"process" -> "unix";
"profunctors" -> "base";
"profunctors" -> "base-orphans";
"profunctors" -> "bifunctors";
"profunctors" -> "comonad";
"profunctors" -> "contravariant";
"profunctors" -> "distributive";
"profunctors" -> "tagged";
"profunctors" -> "transformers";
"random" -> "base";
"random" -> "bytestring";
"random" -> "deepseq";
"random" -> "mtl";
"random" -> "splitmix";
"raw-strings-qq" -> "base";
"raw-strings-qq" -> "template-haskell";
"ref-tf" -> "base";
"ref-tf" -> "stm";
"ref-tf" -> "transformers";
"reflection" -> "base";
"reflection" -> "template-haskell";
"reflex" -> "MemoTrie";
"reflex" -> "base";
"reflex" -> "bifunctors";
"reflex" -> "comonad";
"reflex" -> "constraints";
"reflex" -> "constraints-extras";
"reflex" -> "containers";
"reflex" -> "data-default";
"reflex" -> "dependent-map";
"reflex" -> "dependent-sum";
"reflex" -> "exception-transformers";
"reflex" -> "haskell-src-exts";
"reflex" -> "haskell-src-meta";
"reflex" -> "lens";
"reflex" -> "mmorph";
"reflex" -> "monad-control";
"reflex" -> "monoidal-containers";
"reflex" -> "mtl";
"reflex" -> "patch";
"reflex" -> "prim-uniq";
"reflex" -> "primitive";
"reflex" -> "profunctors";
"reflex" -> "random";
"reflex" -> "ref-tf";
"reflex" -> "reflection";
"reflex" -> "semialign";
"reflex" -> "semigroupoids";
"reflex" -> "stm";
"reflex" -> "syb";
"reflex" -> "template-haskell";
"reflex" -> "these";
"reflex" -> "time";
"reflex" -> "transformers";
"reflex" -> "unbounded-delays";
"reflex" -> "witherable";
"reflex-dom" -> "base";
"reflex-dom" -> "bytestring";
"reflex-dom" -> "data-default";
"reflex-dom" -> "jsaddle";
"reflex-dom" -> "jsaddle-wkwebview";
"reflex-dom" -> "reflex";
"reflex-dom" -> "reflex-dom-core";
"reflex-dom" -> "text";
"reflex-dom-core" -> "aeson";
"reflex-dom-core" -> "base";
"reflex-dom-core" -> "bifunctors";
"reflex-dom-core" -> "bimap";
"reflex-dom-core" -> "blaze-builder";
"reflex-dom-core" -> "bytestring";
"reflex-dom-core" -> "case-insensitive";
"reflex-dom-core" -> "constraints";
"reflex-dom-core" -> "containers";
"reflex-dom-core" -> "contravariant";
"reflex-dom-core" -> "data-default";
"reflex-dom-core" -> "dependent-map";
"reflex-dom-core" -> "dependent-sum";
"reflex-dom-core" -> "dependent-sum-template";
"reflex-dom-core" -> "directory";
"reflex-dom-core" -> "exception-transformers";
"reflex-dom-core" -> "ghcjs-dom";
"reflex-dom-core" -> "jsaddle";
"reflex-dom-core" -> "keycode";
"reflex-dom-core" -> "lens";
"reflex-dom-core" -> "monad-control";
"reflex-dom-core" -> "mtl";
"reflex-dom-core" -> "network-uri";
"reflex-dom-core" -> "primitive";
"reflex-dom-core" -> "random";
"reflex-dom-core" -> "ref-tf";
"reflex-dom-core" -> "reflex";
"reflex-dom-core" -> "semialign";
"reflex-dom-core" -> "semigroups";
"reflex-dom-core" -> "stm";
"reflex-dom-core" -> "template-haskell";
"reflex-dom-core" -> "text";
"reflex-dom-core" -> "these";
"reflex-dom-core" -> "transformers";
"reflex-dom-core" -> "unix";
"reflex-dom-core" -> "zenc";
"safe" -> "base";
"scientific" -> "base";
"scientific" -> "binary";
"scientific" -> "bytestring";
"scientific" -> "containers";
"scientific" -> "deepseq";
"scientific" -> "hashable";
"scientific" -> "integer-gmp";
"scientific" -> "integer-logarithms";
"scientific" -> "primitive";
"scientific" -> "template-haskell";
"scientific" -> "text";
"semialign" -> "base";
"semialign" -> "containers";
"semialign" -> "hashable";
"semialign" -> "semigroupoids";
"semialign" -> "tagged";
"semialign" -> "these";
"semialign" -> "transformers";
"semialign" -> "unordered-containers";
"semialign" -> "vector";
"semigroupoids" -> "base";
"semigroupoids" -> "base-orphans";
"semigroupoids" -> "bifunctors";
"semigroupoids" -> "comonad";
"semigroupoids" -> "containers";
"semigroupoids" -> "contravariant";
"semigroupoids" -> "distributive";
"semigroupoids" -> "hashable";
"semigroupoids" -> "tagged";
"semigroupoids" -> "template-haskell";
"semigroupoids" -> "transformers";
"semigroupoids" -> "transformers-compat";
"semigroupoids" -> "unordered-containers";
"semigroups" -> "base";
"some" -> "base";
"some" -> "deepseq";
"splitmix" -> "base";
"splitmix" -> "deepseq";
"stm" -> "array";
"stm" -> "base";
"strict" -> "assoc";
"strict" -> "base";
"strict" -> "binary";
"strict" -> "bytestring";
"strict" -> "deepseq";
"strict" -> "ghc-prim";
"strict" -> "hashable";
"strict" -> "text";
"strict" -> "these";
"strict" -> "transformers";
"syb" -> "base";
"tagged" -> "base";
"tagged" -> "deepseq";
"tagged" -> "template-haskell";
"tagged" -> "transformers";
"template-haskell" -> "base";
"template-haskell" -> "ghc-boot-th";
"template-haskell" -> "ghc-prim";
"template-haskell" -> "pretty";
"text" -> "array";
"text" -> "base";
"text" -> "binary";
"text" -> "bytestring";
"text" -> "deepseq";
"text" -> "ghc-prim";
"text" -> "integer-gmp";
"text" -> "template-haskell";
"th-abstraction" -> "base";
"th-abstraction" -> "containers";
"th-abstraction" -> "ghc-prim";
"th-abstraction" -> "template-haskell";
"th-compat" -> "base";
"th-compat" -> "template-haskell";
"th-expand-syns" -> "base";
"th-expand-syns" -> "containers";
"th-expand-syns" -> "syb";
"th-expand-syns" -> "template-haskell";
"th-expand-syns" -> "th-abstraction";
"th-extras" -> "base";
"th-extras" -> "containers";
"th-extras" -> "syb";
"th-extras" -> "template-haskell";
"th-extras" -> "th-abstraction";
"th-lift" -> "base";
"th-lift" -> "ghc-prim";
"th-lift" -> "template-haskell";
"th-lift" -> "th-abstraction";
"th-lift-instances" -> "base";
"th-lift-instances" -> "bytestring";
"th-lift-instances" -> "containers";
"th-lift-instances" -> "template-haskell";
"th-lift-instances" -> "text";
"th-lift-instances" -> "th-lift";
"th-lift-instances" -> "transformers";
"th-lift-instances" -> "vector";
"th-orphans" -> "base";
"th-orphans" -> "mtl";
"th-orphans" -> "template-haskell";
"th-orphans" -> "th-compat";
"th-orphans" -> "th-expand-syns";
"th-orphans" -> "th-lift";
"th-orphans" -> "th-lift-instances";
"th-orphans" -> "th-reify-many";
"th-reify-many" -> "base";
"th-reify-many" -> "containers";
"th-reify-many" -> "mtl";
"th-reify-many" -> "safe";
"th-reify-many" -> "template-haskell";
"th-reify-many" -> "th-expand-syns";
"these" -> "assoc";
"these" -> "base";
"these" -> "binary";
"these" -> "deepseq";
"these" -> "hashable";
"time" -> "base";
"time" -> "deepseq";
"time-compat" -> "base";
"time-compat" -> "base-orphans";
"time-compat" -> "deepseq";
"time-compat" -> "time";
"transformers" -> "base";
"transformers-base" -> "base";
"transformers-base" -> "base-orphans";
"transformers-base" -> "stm";
"transformers-base" -> "transformers";
"transformers-base" -> "transformers-compat";
"transformers-compat" -> "base";
"transformers-compat" -> "ghc-prim";
"transformers-compat" -> "transformers";
"type-equality" -> "base";
"unbounded-delays" -> "base";
"unix" -> "base";
"unix" -> "bytestring";
"unix" -> "time";
"unliftio-core" -> "base";
"unliftio-core" -> "transformers";
"unordered-containers" -> "base";
"unordered-containers" -> "deepseq";
"unordered-containers" -> "hashable";
"uuid-types" -> "base";
"uuid-types" -> "binary";
"uuid-types" -> "bytestring";
"uuid-types" -> "deepseq";
"uuid-types" -> "hashable";
"uuid-types" -> "random";
"uuid-types" -> "template-haskell";
"uuid-types" -> "text";
"vector" -> "base";
"vector" -> "deepseq";
"vector" -> "ghc-prim";
"vector" -> "primitive";
"void" -> "base";
"witherable" -> "base";
"witherable" -> "base-orphans";
"witherable" -> "containers";
"witherable" -> "hashable";
"witherable" -> "indexed-traversable";
"witherable" -> "indexed-traversable-instances";
"witherable" -> "transformers";
"witherable" -> "unordered-containers";
"witherable" -> "vector";
"zenc" -> "base";
}
